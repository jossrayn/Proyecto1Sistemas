/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Dimension;
import java.io.File;
import java.nio.file.Path;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.FileManager;

/**
 *
 * @author rayn0
 */
public class main extends javax.swing.JFrame {
    private int panellocationY = 30;
    private int panelSize = 250;
    private FileNameExtensionFilter filter = new FileNameExtensionFilter("Asm files", "asm");//define el formato de archivo que se permite cargar en el file chooser
    private ArrayList<File> fileList = new ArrayList<File>();
    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        console = new javax.swing.JScrollPane();
        txtConsole = new javax.swing.JTextArea();
        PanelPBC = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PBCTable = new javax.swing.JTable();
        lblBPC = new javax.swing.JLabel();
        panelDisk = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        panelMemory = new javax.swing.JPanel();
        memoryTable = new javax.swing.JScrollPane();
        instructionList = new javax.swing.JList<>();
        lblMemory = new javax.swing.JLabel();
        panelWork1 = new javax.swing.JScrollPane();
        workTail1 = new javax.swing.JTable();
        panelWork2 = new javax.swing.JScrollPane();
        workTail2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        panelN1 = new javax.swing.JScrollPane();
        n1Table = new javax.swing.JTable();
        panelN2 = new javax.swing.JScrollPane();
        n1Table1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtLoad = new javax.swing.JTextField();
        btnLoadFile = new javax.swing.JButton();
        btnExecute = new javax.swing.JButton();
        lblConsole = new javax.swing.JLabel();
        lblDisk = new javax.swing.JLabel();
        panelFiles = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable();
        lblFiles = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        console.setBackground(new java.awt.Color(255, 255, 255));
        console.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        console.setForeground(new java.awt.Color(0, 255, 204));
        console.setViewportBorder(javax.swing.BorderFactory.createCompoundBorder());
        console.setAutoscrolls(true);

        txtConsole.setBackground(new java.awt.Color(0, 0, 0));
        txtConsole.setColumns(20);
        txtConsole.setForeground(new java.awt.Color(153, 153, 153));
        txtConsole.setRows(5);
        txtConsole.setText(">");
        txtConsole.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 102, 102)));
        console.setViewportView(txtConsole);

        getContentPane().add(console, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 450, 140));

        PanelPBC.setBackground(new java.awt.Color(0, 0, 0));

        PBCTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "File", "PC", "IR", "AC", "AX", "BX", "CX", "DX", "State"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PBCTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(PBCTable);
        if (PBCTable.getColumnModel().getColumnCount() > 0) {
            PBCTable.getColumnModel().getColumn(0).setResizable(false);
            PBCTable.getColumnModel().getColumn(1).setResizable(false);
            PBCTable.getColumnModel().getColumn(2).setResizable(false);
            PBCTable.getColumnModel().getColumn(3).setResizable(false);
            PBCTable.getColumnModel().getColumn(4).setResizable(false);
            PBCTable.getColumnModel().getColumn(5).setResizable(false);
            PBCTable.getColumnModel().getColumn(6).setResizable(false);
            PBCTable.getColumnModel().getColumn(7).setResizable(false);
            PBCTable.getColumnModel().getColumn(8).setResizable(false);
        }

        lblBPC.setForeground(new java.awt.Color(255, 255, 255));
        lblBPC.setText("BPC'S");

        javax.swing.GroupLayout PanelPBCLayout = new javax.swing.GroupLayout(PanelPBC);
        PanelPBC.setLayout(PanelPBCLayout);
        PanelPBCLayout.setHorizontalGroup(
            PanelPBCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPBCLayout.createSequentialGroup()
                .addComponent(lblBPC, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
        );
        PanelPBCLayout.setVerticalGroup(
            PanelPBCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPBCLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblBPC, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(PanelPBC, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 440, 230));

        panelDisk.setBackground(new java.awt.Color(0, 0, 0));
        panelDisk.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout panelDiskLayout = new javax.swing.GroupLayout(panelDisk);
        panelDisk.setLayout(panelDiskLayout);
        panelDiskLayout.setHorizontalGroup(
            panelDiskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
        );
        panelDiskLayout.setVerticalGroup(
            panelDiskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
        );

        getContentPane().add(panelDisk, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 40, 570, 180));

        panelMemory.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        memoryTable.setBackground(new java.awt.Color(0, 0, 0));
        memoryTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        memoryTable.setViewportView(instructionList);

        javax.swing.GroupLayout panelMemoryLayout = new javax.swing.GroupLayout(panelMemory);
        panelMemory.setLayout(panelMemoryLayout);
        panelMemoryLayout.setHorizontalGroup(
            panelMemoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(memoryTable, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
        );
        panelMemoryLayout.setVerticalGroup(
            panelMemoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(memoryTable, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
        );

        getContentPane().add(panelMemory, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 40, 460, 270));

        lblMemory.setForeground(new java.awt.Color(255, 255, 255));
        lblMemory.setText("Memory");
        getContentPane().add(lblMemory, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 20, 110, -1));

        workTail1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Instruction", "Value", "File"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workTail1.getTableHeader().setReorderingAllowed(false);
        panelWork1.setViewportView(workTail1);
        if (workTail1.getColumnModel().getColumnCount() > 0) {
            workTail1.getColumnModel().getColumn(0).setResizable(false);
            workTail1.getColumnModel().getColumn(1).setResizable(false);
            workTail1.getColumnModel().getColumn(2).setResizable(false);
        }

        getContentPane().add(panelWork1, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 280, 270, 90));

        workTail2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Instruction", "Value", "File"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workTail2.getTableHeader().setReorderingAllowed(false);
        panelWork2.setViewportView(workTail2);
        if (workTail2.getColumnModel().getColumnCount() > 0) {
            workTail2.getColumnModel().getColumn(0).setResizable(false);
            workTail2.getColumnModel().getColumn(1).setResizable(false);
            workTail2.getColumnModel().getColumn(2).setResizable(false);
        }

        getContentPane().add(panelWork2, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 400, 270, 90));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Work Queue's");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 240, 170, 20));

        n1Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Core 2", "Ins", "Ins", "Ins"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        n1Table.getTableHeader().setReorderingAllowed(false);
        panelN1.setViewportView(n1Table);
        if (n1Table.getColumnModel().getColumnCount() > 0) {
            n1Table.getColumnModel().getColumn(0).setResizable(false);
            n1Table.getColumnModel().getColumn(1).setResizable(false);
            n1Table.getColumnModel().getColumn(2).setResizable(false);
            n1Table.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(panelN1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 420, -1, 40));

        n1Table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Core 1", "Ins", "Ins", "Ins"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        n1Table1.getTableHeader().setReorderingAllowed(false);
        panelN2.setViewportView(n1Table1);
        if (n1Table1.getColumnModel().getColumnCount() > 0) {
            n1Table1.getColumnModel().getColumn(0).setResizable(false);
            n1Table1.getColumnModel().getColumn(1).setResizable(false);
            n1Table1.getColumnModel().getColumn(2).setResizable(false);
            n1Table1.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(panelN2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 350, -1, 40));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Core's");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 320, -1, -1));

        txtLoad.setEditable(false);
        txtLoad.setText("Load File");
        txtLoad.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtLoad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtLoadMouseClicked(evt);
            }
        });
        getContentPane().add(txtLoad, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 440, -1));

        btnLoadFile.setBackground(new java.awt.Color(204, 204, 204));
        btnLoadFile.setText("Load");
        btnLoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadFileActionPerformed(evt);
            }
        });
        getContentPane().add(btnLoadFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, 210, -1));

        btnExecute.setText("Execute");
        getContentPane().add(btnExecute, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 470, 220, -1));

        lblConsole.setForeground(new java.awt.Color(255, 255, 255));
        lblConsole.setText("Console");
        getContentPane().add(lblConsole, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        lblDisk.setForeground(new java.awt.Color(255, 255, 255));
        lblDisk.setText("Disk");
        getContentPane().add(lblDisk, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, -1, -1));

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Number", "File Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        fileTable.getTableHeader().setReorderingAllowed(false);
        panelFiles.setViewportView(fileTable);
        if (fileTable.getColumnModel().getColumnCount() > 0) {
            fileTable.getColumnModel().getColumn(0).setResizable(false);
            fileTable.getColumnModel().getColumn(0).setPreferredWidth(5);
            fileTable.getColumnModel().getColumn(1).setResizable(false);
        }

        getContentPane().add(panelFiles, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 280, 250, 210));

        lblFiles.setForeground(new java.awt.Color(255, 255, 255));
        lblFiles.setText("Files");
        getContentPane().add(lblFiles, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 250, 70, 20));

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(1480, 480, -1, -1));

        background.setBackground(new java.awt.Color(0, 0, 0));
        background.setForeground(new java.awt.Color(255, 255, 255));
        background.setOpaque(true);
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(-60, -90, 1680, 820));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadFileActionPerformed
        // TODO add your handling code here:
        if (txtLoad.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Select a file firts");
        }
        else{
            //generando nueva tabla del BPC
            /*
            Object rowData[][] = { { "Row1-Column1", "Row1-Column2", "Row1-Column3", "Row1-Column4", "Row1-Column5"}};
            Object columnNames[] = {"File","PC", "IR", "AC", "State" };
            JTable table = new JTable(rowData, columnNames);

            JScrollPane scrollPane = new JScrollPane(table);
            scrollPane.setSize(452,404);
            scrollPane.setLocation(0,30);
            PanelBpc.add(scrollPane);
            PanelBpc.setPreferredSize(new Dimension(450, panelSize));
            PanelBpc.validate();
            PanelBpc.repaint();
            panellocationY+=160;
            panelSize+=160;
            jScrollPane1.revalidate();
            */
            
            String [][] none={};
            String titles[] = {"Number","File Name"};
            DefaultTableModel model = new DefaultTableModel(none,titles);
            String files[] = txtLoad.getText().split(",");
            for (int i = 0;i<fileList.size();i++){
                    ArrayList<String> array = new ArrayList<String>();
                    array.add(Integer.toString(i+1));
                    array.add(files[i]);
                    model.addRow(array.toArray());
            }
            fileTable.setModel(model);
            txtLoad.setText("Load File");
            
            DefaultListModel<String> modelMemory = new DefaultListModel<>();
            for (File file:fileList){
                FileManager manager = new FileManager();
                ArrayList<String> instructions = manager.read(file.toPath());//lectura del archivo cargado
                for (String ins:instructions){
                    modelMemory.addElement(file.getName() + " " + ins);
                }
            }
            instructionList.setModel(modelMemory);
        }
            
    }//GEN-LAST:event_btnLoadFileActionPerformed

    private void txtLoadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtLoadMouseClicked
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();
        file.setFileFilter(filter);
        file.setMultiSelectionEnabled(true);
        int option = file.showOpenDialog(this);
        
        if (option == JFileChooser.APPROVE_OPTION){
            File selected[] = file.getSelectedFiles();
            for(File fileSelected:selected){
                fileList.add(fileSelected);
                txtLoad.setText(txtLoad.getText() + "," + fileSelected.getName());
            }
            
        }
    }//GEN-LAST:event_txtLoadMouseClicked

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        config window = new config();
        window.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PBCTable;
    private javax.swing.JPanel PanelPBC;
    private javax.swing.JLabel background;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnExecute;
    private javax.swing.JButton btnLoadFile;
    private javax.swing.JScrollPane console;
    private javax.swing.JTable fileTable;
    private javax.swing.JList<String> instructionList;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblBPC;
    private javax.swing.JLabel lblConsole;
    private javax.swing.JLabel lblDisk;
    private javax.swing.JLabel lblFiles;
    private javax.swing.JLabel lblMemory;
    private javax.swing.JScrollPane memoryTable;
    private javax.swing.JTable n1Table;
    private javax.swing.JTable n1Table1;
    private javax.swing.JPanel panelDisk;
    private javax.swing.JScrollPane panelFiles;
    private javax.swing.JPanel panelMemory;
    private javax.swing.JScrollPane panelN1;
    private javax.swing.JScrollPane panelN2;
    private javax.swing.JScrollPane panelWork1;
    private javax.swing.JScrollPane panelWork2;
    private javax.swing.JTextArea txtConsole;
    private javax.swing.JTextField txtLoad;
    private javax.swing.JTable workTail1;
    private javax.swing.JTable workTail2;
    // End of variables declaration//GEN-END:variables
}
