/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import logic.ProcessManagement;
import logic.ProcessNode;
import logic.MemoryManagement;

/**
 *
 * @author cris9
 */
public class Main extends javax.swing.JFrame {
    private FileNameExtensionFilter filter = new FileNameExtensionFilter("CPU Files", "cpu");//define el formato de archivo que se permite cargar en el file chooser
    private ArrayList<String> instructions = new ArrayList<String>();//lista de instrucciones obtenidas del archivo
    private int positionProcess = 0;
    private ArrayList<String[]> procesos = new ArrayList<>();
    private ArrayList<String[]> listCore1;
    private ArrayList<String[]> listCore2;
    private int algorithm,memoryOption,memorySize,diskSize,quantum,blockSize;
    private ArrayList<ProcessNode> procList = new ArrayList<>();
    private MemoryManagement memory;
    private ArrayList<Integer> segmentSize = new ArrayList<>();
    private ArrayList<Integer> virtualSize = new ArrayList<>();
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        jLabel7.setVisible(false);
        txtQuantum.setVisible(false);
        lblFixedSize.setVisible(false);
        txtSize.setVisible(false);
        btnSet.setVisible(false);
        listCore1= new ArrayList<>();
        listCore2= new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableCore1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCore2 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableProcessCore1 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tableProcessCore2 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableMemory = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbProcess = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cbMemory = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtMemorySize = new javax.swing.JTextField();
        txtDiskSize = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        scrollProcess = new javax.swing.JScrollPane();
        tableProcessCharge = new javax.swing.JTable();
        btnCharge = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tableDisk = new javax.swing.JTable();
        btnExecute = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtQuantum = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnApply = new javax.swing.JButton();
        txtFileChooser = new javax.swing.JTextField();
        btnReset = new javax.swing.JButton();
        lblFixedSize = new javax.swing.JLabel();
        txtSize = new javax.swing.JTextField();
        btnSet = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(6, 27));

        tableCore1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCore1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableCore1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableCore1);
        if (tableCore1.getColumnModel().getColumnCount() > 0) {
            tableCore1.getColumnModel().getColumn(0).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(0).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(0).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(1).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(1).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(1).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(2).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(2).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(2).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(3).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(3).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(3).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(4).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(4).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(4).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(5).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(5).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(5).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(6).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(6).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(6).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(7).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(7).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(7).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(8).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(8).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(8).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(9).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(9).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(9).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(10).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(10).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(10).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(11).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(11).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(11).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(12).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(12).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(12).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(13).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(13).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(13).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(14).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(14).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(14).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(15).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(15).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(15).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(16).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(16).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(16).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(17).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(17).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(17).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(18).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(18).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(18).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(19).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(19).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(19).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(20).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(20).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(20).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(21).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(21).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(21).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(22).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(22).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(22).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(23).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(23).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(23).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(24).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(24).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(24).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(25).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(25).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(25).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(26).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(26).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(26).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(27).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(27).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(27).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(28).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(28).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(28).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(29).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(29).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(29).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(30).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(30).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(30).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(31).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(31).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(31).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(32).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(32).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(32).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(33).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(33).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(33).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(34).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(34).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(34).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(35).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(35).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(35).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(36).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(36).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(36).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(37).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(37).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(37).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(38).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(38).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(38).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(39).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(39).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(39).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(40).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(40).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(40).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(41).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(41).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(41).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(42).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(42).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(42).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(43).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(43).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(43).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(44).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(44).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(44).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(45).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(45).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(45).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(46).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(46).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(46).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(47).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(47).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(47).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(48).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(48).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(48).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(49).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(49).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(49).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(50).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(50).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(50).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(51).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(51).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(51).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(52).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(52).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(52).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(53).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(53).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(53).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(54).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(54).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(54).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(55).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(55).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(55).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(56).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(56).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(56).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(57).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(57).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(57).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(58).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(58).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(58).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(59).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(59).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(59).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(60).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(60).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(60).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(61).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(61).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(61).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(62).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(62).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(62).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(63).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(63).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(63).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(64).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(64).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(64).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(65).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(65).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(65).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(66).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(66).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(66).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(67).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(67).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(67).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(68).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(68).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(68).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(69).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(69).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(69).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(70).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(70).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(70).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(71).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(71).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(71).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(72).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(72).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(72).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(73).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(73).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(73).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(74).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(74).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(74).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(75).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(75).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(75).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(76).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(76).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(76).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(77).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(77).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(77).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(78).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(78).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(78).setMaxWidth(22);
            tableCore1.getColumnModel().getColumn(79).setMinWidth(22);
            tableCore1.getColumnModel().getColumn(79).setPreferredWidth(22);
            tableCore1.getColumnModel().getColumn(79).setMaxWidth(22);
        }

        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        tableCore2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCore2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableCore2.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableCore2);
        if (tableCore2.getColumnModel().getColumnCount() > 0) {
            tableCore2.getColumnModel().getColumn(0).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(0).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(0).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(1).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(1).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(1).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(2).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(2).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(2).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(3).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(3).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(3).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(4).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(4).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(4).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(5).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(5).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(5).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(6).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(6).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(6).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(7).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(7).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(7).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(8).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(8).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(8).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(9).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(9).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(9).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(10).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(10).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(10).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(11).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(11).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(11).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(12).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(12).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(12).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(13).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(13).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(13).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(14).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(14).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(14).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(15).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(15).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(15).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(16).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(16).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(16).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(17).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(17).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(17).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(18).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(18).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(18).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(19).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(19).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(19).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(20).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(20).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(20).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(21).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(21).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(21).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(22).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(22).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(22).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(23).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(23).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(23).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(24).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(24).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(24).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(25).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(25).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(25).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(26).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(26).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(26).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(27).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(27).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(27).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(28).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(28).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(28).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(29).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(29).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(29).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(30).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(30).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(30).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(31).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(31).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(31).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(32).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(32).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(32).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(33).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(33).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(33).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(34).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(34).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(34).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(35).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(35).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(35).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(36).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(36).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(36).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(37).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(37).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(37).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(38).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(38).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(38).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(39).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(39).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(39).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(40).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(40).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(40).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(41).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(41).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(41).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(42).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(42).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(42).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(43).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(43).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(43).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(44).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(44).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(44).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(45).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(45).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(45).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(46).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(46).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(46).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(47).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(47).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(47).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(48).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(48).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(48).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(49).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(49).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(49).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(50).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(50).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(50).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(51).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(51).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(51).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(52).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(52).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(52).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(53).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(53).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(53).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(54).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(54).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(54).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(55).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(55).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(55).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(56).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(56).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(56).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(57).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(57).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(57).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(58).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(58).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(58).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(59).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(59).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(59).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(60).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(60).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(60).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(61).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(61).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(61).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(62).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(62).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(62).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(63).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(63).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(63).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(64).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(64).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(64).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(65).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(65).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(65).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(66).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(66).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(66).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(67).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(67).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(67).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(68).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(68).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(68).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(69).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(69).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(69).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(70).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(70).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(70).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(71).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(71).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(71).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(72).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(72).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(72).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(73).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(73).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(73).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(74).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(74).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(74).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(75).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(75).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(75).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(76).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(76).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(76).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(77).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(77).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(77).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(78).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(78).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(78).setMaxWidth(22);
            tableCore2.getColumnModel().getColumn(79).setMinWidth(22);
            tableCore2.getColumnModel().getColumn(79).setPreferredWidth(22);
            tableCore2.getColumnModel().getColumn(79).setMaxWidth(22);
        }

        tableProcessCore1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pos", "Process"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tableProcessCore1);
        if (tableProcessCore1.getColumnModel().getColumnCount() > 0) {
            tableProcessCore1.getColumnModel().getColumn(0).setMinWidth(30);
            tableProcessCore1.getColumnModel().getColumn(0).setPreferredWidth(30);
            tableProcessCore1.getColumnModel().getColumn(0).setMaxWidth(30);
            tableProcessCore1.getColumnModel().getColumn(1).setResizable(false);
        }

        tableProcessCore2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pos", "Process"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tableProcessCore2);
        if (tableProcessCore2.getColumnModel().getColumnCount() > 0) {
            tableProcessCore2.getColumnModel().getColumn(0).setMinWidth(30);
            tableProcessCore2.getColumnModel().getColumn(0).setPreferredWidth(30);
            tableProcessCore2.getColumnModel().getColumn(0).setMaxWidth(30);
            tableProcessCore2.getColumnModel().getColumn(1).setResizable(false);
        }

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tableMemory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pos", "Process"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tableMemory);
        if (tableMemory.getColumnModel().getColumnCount() > 0) {
            tableMemory.getColumnModel().getColumn(0).setMinWidth(30);
            tableMemory.getColumnModel().getColumn(0).setPreferredWidth(30);
            tableMemory.getColumnModel().getColumn(0).setMaxWidth(30);
            tableMemory.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Core 2");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Core 1");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Algorithm Chooser");
        jLabel3.setToolTipText("");

        jLabel4.setText("Algorithm");
        jLabel4.setToolTipText("");

        cbProcess.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FCFS", "SJF(Appropiative)", "RR", "Feedback", "HRRN", "Priority (Appropiative)" }));
        cbProcess.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cbProcessPropertyChange(evt);
            }
        });

        jLabel5.setText("Memory Method");
        jLabel5.setToolTipText("");

        cbMemory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fixed", "Dynamic", "Pagination", "Segmentation" }));
        cbMemory.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cbMemoryPropertyChange(evt);
            }
        });

        jLabel6.setText("Memory Size");
        jLabel6.setToolTipText("");

        txtMemorySize.setText("128");

        txtDiskSize.setText("1024");

        jLabel7.setText("Quantum Size");
        jLabel7.setToolTipText("");

        scrollProcess.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        tableProcessCharge.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process", "Burst", "Arrival Time", "Priority", "Size", "State"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollProcess.setViewportView(tableProcessCharge);
        if (tableProcessCharge.getColumnModel().getColumnCount() > 0) {
            tableProcessCharge.getColumnModel().getColumn(0).setResizable(false);
            tableProcessCharge.getColumnModel().getColumn(1).setResizable(false);
            tableProcessCharge.getColumnModel().getColumn(2).setResizable(false);
            tableProcessCharge.getColumnModel().getColumn(3).setResizable(false);
            tableProcessCharge.getColumnModel().getColumn(4).setResizable(false);
            tableProcessCharge.getColumnModel().getColumn(5).setResizable(false);
        }

        btnCharge.setText("Charge File");
        btnCharge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChargeActionPerformed(evt);
            }
        });

        jScrollPane8.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane8.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tableDisk.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pos", "Process"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(tableDisk);
        if (tableDisk.getColumnModel().getColumnCount() > 0) {
            tableDisk.getColumnModel().getColumn(0).setMinWidth(30);
            tableDisk.getColumnModel().getColumn(0).setPreferredWidth(30);
            tableDisk.getColumnModel().getColumn(0).setMaxWidth(30);
            tableDisk.getColumnModel().getColumn(1).setResizable(false);
        }

        btnExecute.setText("Execute");
        btnExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteActionPerformed(evt);
            }
        });

        jLabel8.setText("Disk Size");
        jLabel8.setToolTipText("");

        txtQuantum.setText("0");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Memory");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Disk");

        btnApply.setText("Apply");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        txtFileChooser.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtFileChooser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtFileChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFileChooserMouseClicked(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        lblFixedSize.setText("Block Size");

        btnSet.setText("Set");
        btnSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 842, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbMemory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbProcess, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtMemorySize)
                                            .addComponent(txtDiskSize))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel7)
                                            .addComponent(txtQuantum, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(btnSet)
                                                .addGap(39, 39, 39))
                                            .addComponent(lblFixedSize)
                                            .addComponent(txtSize))))
                                .addGap(75, 75, 75)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(scrollProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnCharge, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(btnExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 842, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(btnReset, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnApply, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel10)
                                .addComponent(jLabel11))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cbProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtQuantum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel5)
                                            .addComponent(lblFixedSize))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(cbMemory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel6)
                                            .addComponent(btnSet))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMemorySize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(scrollProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnCharge, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDiskSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnApply)
                                .addGap(14, 14, 14)
                                .addComponent(btnReset)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel1)
                                        .addGap(3, 3, 3)
                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChargeActionPerformed
        // TODO add your handling code here:
        txtFileChooser.setText("");
        memory.set(tableMemory,tableDisk,procList);
        
    }//GEN-LAST:event_btnChargeActionPerformed


    
    private void btnExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteActionPerformed
        // TODO add your handling code here:
       /* for(String[] proc: procesos){
            Random randNumber = new Random();
            int core = randNumber.nextInt(2);//generacion del numero random eleccion de nucleo
            if(core == 1){
                listCore1.add(proc);
            }else{
                listCore2.add(proc);
            }
        }*/
       listCore1 = procesos;
        if(!instructions.isEmpty() && instructions.size() <= 12){
            if(listCore1.size() > 0){
            ProcessManagement core1 = new ProcessManagement(1,listCore1,tableProcessCore1,tableCore1,tableMemory,tableDisk,tableProcessCharge,algorithm,memoryOption,memorySize,diskSize,quantum);  
            core1.start();
            }
            if(listCore2.size() > 0){
            ProcessManagement core2 = new ProcessManagement(2,listCore2,tableProcessCore2,tableCore2,tableMemory,tableDisk,tableProcessCharge,algorithm,memoryOption,memorySize,diskSize,quantum);
            core2.start();
            }
        }else{
            JOptionPane.showMessageDialog(null, "The file is empty or contains more than 12 process");
        }
    }//GEN-LAST:event_btnExecuteActionPerformed

    private void cbProcessPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cbProcessPropertyChange
        // TODO add your handling code here:
        String option = cbProcess.getSelectedItem().toString();
        if(option.equals("RR") || option.equals("Feedback")){
            jLabel7.setVisible(true);
            txtQuantum.setVisible(true);
        }else{
            jLabel7.setVisible(false);
            txtQuantum.setVisible(false);        
        }
    }//GEN-LAST:event_cbProcessPropertyChange

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        // TODO add your handling code here:
        try{
            memorySize = Integer.parseInt(txtMemorySize.getText());
            diskSize = Integer.parseInt(txtDiskSize.getText());
            algorithm = cbProcess.getSelectedIndex();
            memoryOption = cbMemory.getSelectedIndex();
            quantum = Integer.parseInt(txtQuantum.getText());
            if(memoryOption == 1){
                 blockSize = 1;
            }
            else{
                blockSize = Integer.parseInt(txtSize.getText());
            }
            if(verificar()){
                memory = new MemoryManagement(memoryOption,memorySize,diskSize,blockSize,segmentSize,virtualSize);
            }
            else{
            
            }
            lblFixedSize.setVisible(false);
            txtSize.setText("");
            txtSize.setVisible(false);
            btnSet.setVisible(false);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "1. Check your input, fill blank space.\n2. Check you input, only numbers.");
        }
    }//GEN-LAST:event_btnApplyActionPerformed

    public boolean verificar(){
        int suma = 0;
        for(int size:segmentSize){
            suma += size;
        }
        if(suma <= memorySize){
            return true;
        }
        else{
            return false;
        }
    }
    
    private void txtFileChooserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFileChooserMouseClicked
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();
        file.setFileFilter(filter);
        file.setMultiSelectionEnabled(true);
        int option = file.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION){
            File selected[] = file.getSelectedFiles();
            for(File fileSelected:selected){
                    try {
                            txtFileChooser.setText(fileSelected.getName());
                            instructions= (ArrayList<String>) Files.readAllLines(fileSelected.toPath(), StandardCharsets.UTF_8);//lectura del archivo
                       } catch (Exception ex) {
                           instructions = null;
                       }
            }
        }
        if(!instructions.isEmpty() && instructions.size() <= 12){
            String [][] none={};
            String titles[] = {"Process","Burst","Arrival Time","Priority","Size","State"};
            DefaultTableModel modelCharge = new DefaultTableModel(none,titles);
            for(String ins: instructions){
                String proces = ins.trim()+"pending";
                String[] proceso = proces.split(";");
                ArrayList<String> array = new ArrayList<String>();
                try{
                    ProcessNode proc = new ProcessNode(proceso[0],Integer.parseInt(proceso[1]),Integer.parseInt(proceso[2]),Integer.parseInt(proceso[3]),Integer.parseInt(proceso[4]),"Pending");
                    procList.add(proc);
                    procesos.add(proceso);
                    for(String i : proceso){
                        array.add(i);
                        System.out.print(i+"    ");
                    }
                    System.out.println();
                    array.add("Pending");
                    modelCharge.addRow(array.toArray());                    
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Error Format File");
                    filter = new FileNameExtensionFilter("CPU Files", "cpu");//define el formato de archivo que se permite cargar en el file chooser
                    instructions = new ArrayList<String>();//lista de instrucciones obtenidas del archivo
                    positionProcess = 0;
                    procesos = new ArrayList<>();
                    listCore1 = new ArrayList<>();
                    listCore2 = new ArrayList<>();
                    algorithm = 0;
                    memoryOption =0;
                    memorySize = 0;
                    diskSize = 0;
                    quantum = 0;
                    blockSize = 0;
                    procList = new ArrayList<>();
                    segmentSize = new ArrayList<>();
                    virtualSize = new ArrayList<>();
                    txtFileChooser.setText("");
                    break;
                }
            }     
            tableProcessCharge.setModel(modelCharge);
        }else{
            JOptionPane.showMessageDialog(null, "The file is empty or contains more than 12 process");
        }
    }//GEN-LAST:event_txtFileChooserMouseClicked

    private void cbMemoryPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cbMemoryPropertyChange
        // TODO add your handling code here:
        String option = cbMemory.getSelectedItem().toString();
        if(option.equals("Fixed")){
            lblFixedSize.setText("Block size");
            lblFixedSize.setVisible(true);
            txtSize.setVisible(true);
            btnSet.setVisible(false);
         
        }
        else if( option.equals("Pagination")){
            lblFixedSize.setText("Page size");
            lblFixedSize.setVisible(true);
            txtSize.setVisible(true);
            btnSet.setVisible(false);
        }
        else if(option.equals("Segmentation")){
            lblFixedSize.setText("Segment numbers");
            lblFixedSize.setVisible(true);
            txtSize.setVisible(true);
            btnSet.setVisible(true);
        }
        else{
            lblFixedSize.setVisible(false);
            txtSize.setVisible(false);
            btnSet.setVisible(false);
        }
    }//GEN-LAST:event_cbMemoryPropertyChange

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        String [][] none={};
        String titles[] = {"Process","Burst","Arrival Time","Priority","Size","State"};
        DefaultTableModel modelCharge = new DefaultTableModel(none,titles);
        tableProcessCharge.setModel(modelCharge);
        
        String titles2[] = {"Pos","Process"};
        DefaultTableModel model = new DefaultTableModel(none,titles2);
        
        tableMemory.setModel(model);
        tableDisk.setModel(model);
        
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetActionPerformed
        // TODO add your handling code here:
        try{
            int counter = Integer.parseInt(txtSize.getText());
            for (int i=0;i<counter;i++){
                String value = JOptionPane.showInputDialog("Insert segment #"+i+" size");
                segmentSize.add(Integer.parseInt(value));
            }
            for (int i=0;i<counter;i++){
                String value = JOptionPane.showInputDialog("Insert virtual segment #"+i+" size");
                virtualSize.add(Integer.parseInt(value));
            }
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Please insert a correct data.");
        }
    }//GEN-LAST:event_btnSetActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnCharge;
    private javax.swing.JButton btnExecute;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSet;
    private javax.swing.JComboBox<String> cbMemory;
    private javax.swing.JComboBox<String> cbProcess;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lblFixedSize;
    private javax.swing.JScrollPane scrollProcess;
    private javax.swing.JTable tableCore1;
    private javax.swing.JTable tableCore2;
    private javax.swing.JTable tableDisk;
    private javax.swing.JTable tableMemory;
    private javax.swing.JTable tableProcessCharge;
    private javax.swing.JTable tableProcessCore1;
    private javax.swing.JTable tableProcessCore2;
    private javax.swing.JTextField txtDiskSize;
    private javax.swing.JTextField txtFileChooser;
    private javax.swing.JTextField txtMemorySize;
    private javax.swing.JTextField txtQuantum;
    private javax.swing.JTextField txtSize;
    // End of variables declaration//GEN-END:variables
}
